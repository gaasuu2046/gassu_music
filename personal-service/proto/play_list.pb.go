// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/play_list.proto

package personalservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// プレイリストを取得するためのパラメータを定義
type PlaylistRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlaylistRequest) Reset()         { *m = PlaylistRequest{} }
func (m *PlaylistRequest) String() string { return proto.CompactTextString(m) }
func (*PlaylistRequest) ProtoMessage()    {}
func (*PlaylistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13c548bff037b33c, []int{0}
}

func (m *PlaylistRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaylistRequest.Unmarshal(m, b)
}
func (m *PlaylistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaylistRequest.Marshal(b, m, deterministic)
}
func (m *PlaylistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaylistRequest.Merge(m, src)
}
func (m *PlaylistRequest) XXX_Size() int {
	return xxx_messageInfo_PlaylistRequest.Size(m)
}
func (m *PlaylistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaylistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlaylistRequest proto.InternalMessageInfo

func (m *PlaylistRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlaylistRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// プレイリスト取得後のパラメータを定義
type PlaylistReply struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Account              string   `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	TrackNum             int64    `protobuf:"varint,4,opt,name=track_num,json=trackNum,proto3" json:"track_num,omitempty"`
	TrackUrl             string   `protobuf:"bytes,5,opt,name=track_url,json=trackUrl,proto3" json:"track_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlaylistReply) Reset()         { *m = PlaylistReply{} }
func (m *PlaylistReply) String() string { return proto.CompactTextString(m) }
func (*PlaylistReply) ProtoMessage()    {}
func (*PlaylistReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_13c548bff037b33c, []int{1}
}

func (m *PlaylistReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaylistReply.Unmarshal(m, b)
}
func (m *PlaylistReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaylistReply.Marshal(b, m, deterministic)
}
func (m *PlaylistReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaylistReply.Merge(m, src)
}
func (m *PlaylistReply) XXX_Size() int {
	return xxx_messageInfo_PlaylistReply.Size(m)
}
func (m *PlaylistReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaylistReply.DiscardUnknown(m)
}

var xxx_messageInfo_PlaylistReply proto.InternalMessageInfo

func (m *PlaylistReply) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *PlaylistReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlaylistReply) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *PlaylistReply) GetTrackNum() int64 {
	if m != nil {
		return m.TrackNum
	}
	return 0
}

func (m *PlaylistReply) GetTrackUrl() string {
	if m != nil {
		return m.TrackUrl
	}
	return ""
}

func init() {
	proto.RegisterType((*PlaylistRequest)(nil), "personalservice.PlaylistRequest")
	proto.RegisterType((*PlaylistReply)(nil), "personalservice.PlaylistReply")
}

func init() { proto.RegisterFile("proto/play_list.proto", fileDescriptor_13c548bff037b33c) }

var fileDescriptor_13c548bff037b33c = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x4d, 0xd2, 0xaa, 0x19, 0xd4, 0xc8, 0xa0, 0xb0, 0x28, 0x48, 0xc8, 0xa9, 0xa7, 0x08,
	0x7a, 0xf0, 0x23, 0x78, 0x13, 0x09, 0xe4, 0x5c, 0xd6, 0x74, 0x0e, 0xa1, 0x9b, 0xdd, 0x75, 0xff,
	0x08, 0xfb, 0x11, 0xfc, 0xd6, 0x92, 0xa9, 0xa5, 0xd8, 0x83, 0xb7, 0x79, 0x6f, 0xe6, 0xc7, 0xdb,
	0xb7, 0x70, 0x6b, 0x9d, 0x09, 0xe6, 0xd1, 0x2a, 0x99, 0xd6, 0x6a, 0xf4, 0xa1, 0x65, 0x8d, 0x95,
	0x25, 0xe7, 0x8d, 0x96, 0xca, 0x93, 0xfb, 0x1a, 0x07, 0x6a, 0x5e, 0xa0, 0x7a, 0x57, 0x32, 0xcd,
	0x27, 0x1d, 0x7d, 0x46, 0xf2, 0x01, 0xaf, 0x20, 0x1f, 0x37, 0x22, 0xab, 0xb3, 0x55, 0xd1, 0xe5,
	0xe3, 0x06, 0x6f, 0x60, 0x19, 0xcc, 0x96, 0xb4, 0xc8, 0xeb, 0x6c, 0x55, 0x76, 0x3b, 0xd1, 0x7c,
	0x67, 0x70, 0x79, 0x20, 0xad, 0x4a, 0x78, 0x0d, 0x45, 0x74, 0x8a, 0xc1, 0xb2, 0x9b, 0x47, 0x44,
	0x58, 0x68, 0x39, 0xd1, 0x2f, 0xc8, 0x33, 0x0a, 0x38, 0x93, 0xc3, 0x60, 0xa2, 0x0e, 0xa2, 0x60,
	0x7b, 0x2f, 0xf1, 0x1e, 0xca, 0xe0, 0xe4, 0xb0, 0x5d, 0xeb, 0x38, 0x89, 0x05, 0xc7, 0x9f, 0xb3,
	0xf1, 0x16, 0xa7, 0xc3, 0x72, 0x8e, 0x58, 0x32, 0xb8, 0x5b, 0xf6, 0x4e, 0x3d, 0x11, 0x5c, 0xf4,
	0x9e, 0xdc, 0xfe, 0x39, 0xd8, 0x43, 0xf5, 0x4a, 0xe1, 0x8f, 0x55, 0xb7, 0x47, 0xcd, 0xdb, 0xa3,
	0xda, 0x77, 0x0f, 0xff, 0x5c, 0x58, 0x95, 0x9a, 0x93, 0x8f, 0x53, 0xfe, 0xc3, 0xe7, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xbd, 0x3c, 0x43, 0xfe, 0x5c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserPlaylistClient is the client API for UserPlaylist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserPlaylistClient interface {
	// Spotify IDに紐づくPlayListを返却するサービスを定義
	GetUserPlaylist(ctx context.Context, in *PlaylistRequest, opts ...grpc.CallOption) (*PlaylistReply, error)
}

type userPlaylistClient struct {
	cc *grpc.ClientConn
}

func NewUserPlaylistClient(cc *grpc.ClientConn) UserPlaylistClient {
	return &userPlaylistClient{cc}
}

func (c *userPlaylistClient) GetUserPlaylist(ctx context.Context, in *PlaylistRequest, opts ...grpc.CallOption) (*PlaylistReply, error) {
	out := new(PlaylistReply)
	err := c.cc.Invoke(ctx, "/personalservice.UserPlaylist/GetUserPlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPlaylistServer is the server API for UserPlaylist service.
type UserPlaylistServer interface {
	// Spotify IDに紐づくPlayListを返却するサービスを定義
	GetUserPlaylist(context.Context, *PlaylistRequest) (*PlaylistReply, error)
}

// UnimplementedUserPlaylistServer can be embedded to have forward compatible implementations.
type UnimplementedUserPlaylistServer struct {
}

func (*UnimplementedUserPlaylistServer) GetUserPlaylist(ctx context.Context, req *PlaylistRequest) (*PlaylistReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPlaylist not implemented")
}

func RegisterUserPlaylistServer(s *grpc.Server, srv UserPlaylistServer) {
	s.RegisterService(&_UserPlaylist_serviceDesc, srv)
}

func _UserPlaylist_GetUserPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPlaylistServer).GetUserPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personalservice.UserPlaylist/GetUserPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPlaylistServer).GetUserPlaylist(ctx, req.(*PlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserPlaylist_serviceDesc = grpc.ServiceDesc{
	ServiceName: "personalservice.UserPlaylist",
	HandlerType: (*UserPlaylistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserPlaylist",
			Handler:    _UserPlaylist_GetUserPlaylist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/play_list.proto",
}
